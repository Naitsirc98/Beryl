#version 450 core

struct DrawCommand {
    uint count;
    uint instanceCount;
    uint firstIndex;
    uint baseVertex;
    uint baseInstance;
};

struct BoundingBox {
    vec3 min;
    vec3 max;
};

// TODO: need camera matrices

layout(local_size_x = 1) in;

layout(std430, binding = 0) readonly buffer MeshCommandBuffer {
    DrawCommand[] meshCommands;
};

layout(std430, binding = 1) writeonly buffer CommandBuffer {
    DrawCommand[] instanceCommands;
};

layout(std430, binding = 2) readonly buffer Bounds {
    BoundingBox boundingBoxes[];
};

layout(std430, binding = 3) readonly buffer Matrices {
    mat4 modelMatrices[];
};

layout(std430, binding = 4) readonly buffer MeshIDs {
    int meshIDs[];
};

void main() {

    const uint index = gl_GlobalInvocationID.x;

    const int meshID = meshIDs[index];

    BoundingBox aabb = boundingBoxes[meshID];

    uint visible = 1; // Frustum culling, 1 = visible, 0 otherwise

    if(visible == 1) {

        DrawCommand meshCommand = meshCommands[meshID];

        DrawCommand command = meshCommand;

        command.instanceCount = 1;
        command.baseInstance = index;

        instanceCommands[index] = command;
    }
}